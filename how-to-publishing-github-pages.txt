1. gh-pages 설치
    (npm 기준) cmd 창에서 [npm i gh-pages] 명령어를 통해 gh-pages 설치
    gh-pages는 GitHub에 올린 HTML, CSS, JS를 통해 웹사이트를 만들어 준다. with awsome domain!

2. npm build를 통한 porject build
    package.json 파일을 확인해 보면 build 명령어가 존재하는 것을 알 수 있는데, build 명령어를 통해 production ready code를 생성한다.
    production ready code는 코드가 압축되고, 최적화 된다는 뜻! (시간이 좀 걸린다.)
    프로젝트가 위치한 디렉토리에서 [npm run build] 명령어를 통해 빌드를 진행할 수 있다.

3. build 명령어를 통해 build하면 build 폴더가 생성된다.
    3-1) build 폴더가 생성되었으면 homepage 주소를 작성한다.
    package.json에서 가장 마지막(새로운 {}를 만드는 것이 아니라, 마지막 요소 다음에 콤마와 함께 추가!)에
        "homepage": "https://[github user name].github.io/[Repository name]"을 추가한다.
        ex) "homepage": "https://nomadcoders.github.io/react-for-beginners"
    
    3-2) scripts에 deploy를 추가한다.
        deploy는 gh-pages를 실행시키고, build 디렉토리를 가져간다.
        in scripts,
        "deploy": "gh-pages -d build"
        +) 여기서 build를 하고 deploy를 해야 한다는 것을 기억하고 싶지 않다면 predeploy를 만들어 사용할 수 있다.
        "predeploy": "npm run build"
        이렇게 predeploy를 미리 추가해놓으면, [npm run deploy] 명령러를 통해 deploy를 시작하면 Node.js가 predeploy를 알아서 먼저 실행시킨다!!

    3-3) deploy의 명령어 [gh-pages -d build]는 gh-pages가 build 폴더를 hompage url 웹사이트에 업로드되도록 한다!

    이를 모두 마치는데 5분정도 소요되니, deploy 후 5분 뒤에 웹사이트로 접속해보자.

* summary *
1. package.json에 "hompage": "url" 작성
2. package.json - scripts에 deploy, predeploy 작성
3. npm run deploy 실행
4. 끝 !
+) 수정사항이 생겨 업데이트가 필요한 경우, npm run deploy 만으로도 업데이트 반영 가능!(이 또한 시간 소요가 있음.)